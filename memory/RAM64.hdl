// Figuring out the RAM64 was a bit tricky for me. Here's a breakdown to help me remember:
// First off, addresses are 6 bits wide, so in binary to decimal, that's 2^6, which results in 0 to 63 possible address names.

// The last 3 bits decide which RAM to route the input through before it's stored in a register and the first 3 bits pinpoint
// the exact register in RAM8 for use. With RAM8 holding 8 registers, only 8 unique addresses can be active at once, explaining 
// why spliting the last 3 bits and the first others are key for selecting a RAM8 register.

// Let's draw a table to explain how this works:
// Essentially, you have addresses from 000000 (0) to 111111 (63).
// I've broken it down into 8 parts to accommodate the 8 registers.

// RAM 3 bits for 8 registers:

// | RAM NAME | RANGE ADDRESS | BINARY 3 BITS | MAX ADDRESS RAM8 |
// |----------|---------------|---------------|------------------|
// |  RAM1    |     0-7       |     000       |        111       |
// |  RAM2    |     8-15      |     001       |        111       |
// |  RAM3    |    16-23      |     010       |        111       |
// |  RAM4    |    24-31      |     011       |        111       |
// |  RAM5    |    32-39      |     100       |        111       |
// |  RAM6    |    40-47      |     101       |        111       |
// |  RAM7    |    48-55      |     110       |        111       |
// |  RAM8    |    56-63      |     111       |        111       |

// Example:
// Let's say I want to set/load 2 in register 47.

// Binary address = 101111
// Binary value = 0000000000000010

// Use the first 3 bits to decide which RAM8:
// address[3..5] == 101 == 5

// As we can see in the table, the first 3 bits being 5 means that register 47 is in RAM6. Always remember that indexing starts at 0, so RAM6 is the 5th RAM8.
// The last 3 bits are used to select the register inside RAM8, so address[0..2] == 111 == 7

// Since each RAM8 only handles addresses 0 to 7, we can't pass the full address because it would lead to overflow, speaking from personal experience. :)

/**
 * Memory of sixty four 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=load1, b=load2, c=load3, d=load4, e=load5, f=load6, g=load7, h=load8);
    
    RAM8(in=in, load=load1, address=address[0..2], out=ram1);
    RAM8(in=in, load=load2, address=address[0..2], out=ram2);
    RAM8(in=in, load=load3, address=address[0..2], out=ram3);
    RAM8(in=in, load=load4, address=address[0..2], out=ram4);
    RAM8(in=in, load=load5, address=address[0..2], out=ram5);
    RAM8(in=in, load=load6, address=address[0..2], out=ram6);
    RAM8(in=in, load=load7, address=address[0..2], out=ram7);
    RAM8(in=in, load=load8, address=address[0..2], out=ram8);
    
    Mux8Way16(a=ram1, b=ram2, c=ram3, d=ram4, e=ram5, f=ram6, g=ram7, h=ram8, sel=address[3..5], out=out);
}
