/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *           0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
//
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // Solving X
    Mux16(a=x, b[0..15]=false, sel=zx, out=zdx);
    Not16(in=zdx, out=notzdx);
    Mux16(a=zdx, b=notzdx, sel=nx, out=resx);

    // Solving Y
    Mux16(a=y, b[0..15]=false, sel=zy, out=zdy);
    Not16(in=zdy, out=notzdy);
    Mux16(a=zdy, b=notzdy, sel=ny, out=resy);

    // Adding x + y
    Add16(a=resx, b=resy, out=addxy);

    // And x & y
    And16(a=resx, b=resy, out=andxy);

    // Selects the F operation
    Mux16(a=andxy, b=addxy, sel=f, out=fout);

    // Solving Not
    Not16(in=fout, out=notfout);

    // Solving zero
    Or16Way(in=finalout, out=orfout);
    Not(in=orfout, out=zr);
   
    // Solving Out put negation
    Mux16(a=fout, b=notfout, sel=no, out=finalout);

    // Solving NG
    And16(a[0..15]=true, b=finalout, out[15]=ng, out[0..14]=drop);

    // Solving Out
    Or16(a=finalout, b[0..15]=false, out=out);
}
